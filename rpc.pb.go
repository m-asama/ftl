// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package ftl is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	PullNodeIdListRequest
	PullNodeIdListReply
	NodeEntry
	PushNodeListRequest
	PushNodeListReply
	Destination
	NetEntry
	BroadcastNetListRequest
	BroadcastNetListReply
	QueryReadyRequest
	QueryReadyReply
	NodeContainer
	GetStatsRequest
	GetStatsReply
	GetAccessLogRequest
	GetAccessLogReply
*/
package ftl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	MyNodeId  uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	LocalTime int64  `protobuf:"varint,2,opt,name=local_time,json=localTime" json:"local_time,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *HelloRequest) GetLocalTime() int64 {
	if m != nil {
		return m.LocalTime
	}
	return 0
}

type HelloReply struct {
	MyNodeId  uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	LocalTime int64  `protobuf:"varint,2,opt,name=local_time,json=localTime" json:"local_time,omitempty"`
	Addr6     string `protobuf:"bytes,3,opt,name=addr6" json:"addr6,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *HelloReply) GetLocalTime() int64 {
	if m != nil {
		return m.LocalTime
	}
	return 0
}

func (m *HelloReply) GetAddr6() string {
	if m != nil {
		return m.Addr6
	}
	return ""
}

type PullNodeIdListRequest struct {
	MyNodeId uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
}

func (m *PullNodeIdListRequest) Reset()                    { *m = PullNodeIdListRequest{} }
func (m *PullNodeIdListRequest) String() string            { return proto.CompactTextString(m) }
func (*PullNodeIdListRequest) ProtoMessage()               {}
func (*PullNodeIdListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PullNodeIdListRequest) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

type PullNodeIdListReply struct {
	MyNodeId uint32   `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	NodeIds  []uint32 `protobuf:"varint,2,rep,packed,name=node_ids,json=nodeIds" json:"node_ids,omitempty"`
}

func (m *PullNodeIdListReply) Reset()                    { *m = PullNodeIdListReply{} }
func (m *PullNodeIdListReply) String() string            { return proto.CompactTextString(m) }
func (*PullNodeIdListReply) ProtoMessage()               {}
func (*PullNodeIdListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PullNodeIdListReply) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *PullNodeIdListReply) GetNodeIds() []uint32 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type NodeEntry struct {
	NodeId                 uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	StatsHourCount         uint32 `protobuf:"varint,2,opt,name=stats_hour_count,json=statsHourCount" json:"stats_hour_count,omitempty"`
	StatsHourUploadNanoSec uint64 `protobuf:"varint,3,opt,name=stats_hour_upload_nano_sec,json=statsHourUploadNanoSec" json:"stats_hour_upload_nano_sec,omitempty"`
	StatsHourUploadBytes   uint64 `protobuf:"varint,4,opt,name=stats_hour_upload_bytes,json=statsHourUploadBytes" json:"stats_hour_upload_bytes,omitempty"`
	StatsHourLatency       uint64 `protobuf:"varint,5,opt,name=stats_hour_latency,json=statsHourLatency" json:"stats_hour_latency,omitempty"`
	StatsDayCount          uint32 `protobuf:"varint,6,opt,name=stats_day_count,json=statsDayCount" json:"stats_day_count,omitempty"`
	StatsDayUploadNanoSec  uint64 `protobuf:"varint,7,opt,name=stats_day_upload_nano_sec,json=statsDayUploadNanoSec" json:"stats_day_upload_nano_sec,omitempty"`
	StatsDayUploadBytes    uint64 `protobuf:"varint,8,opt,name=stats_day_upload_bytes,json=statsDayUploadBytes" json:"stats_day_upload_bytes,omitempty"`
	StatsDayLatency        uint64 `protobuf:"varint,9,opt,name=stats_day_latency,json=statsDayLatency" json:"stats_day_latency,omitempty"`
	StatsWeekCount         uint32 `protobuf:"varint,10,opt,name=stats_week_count,json=statsWeekCount" json:"stats_week_count,omitempty"`
	StatsWeekUploadNanoSec uint64 `protobuf:"varint,11,opt,name=stats_week_upload_nano_sec,json=statsWeekUploadNanoSec" json:"stats_week_upload_nano_sec,omitempty"`
	StatsWeekUploadBytes   uint64 `protobuf:"varint,12,opt,name=stats_week_upload_bytes,json=statsWeekUploadBytes" json:"stats_week_upload_bytes,omitempty"`
	StatsWeekLatency       uint64 `protobuf:"varint,13,opt,name=stats_week_latency,json=statsWeekLatency" json:"stats_week_latency,omitempty"`
}

func (m *NodeEntry) Reset()                    { *m = NodeEntry{} }
func (m *NodeEntry) String() string            { return proto.CompactTextString(m) }
func (*NodeEntry) ProtoMessage()               {}
func (*NodeEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeEntry) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeEntry) GetStatsHourCount() uint32 {
	if m != nil {
		return m.StatsHourCount
	}
	return 0
}

func (m *NodeEntry) GetStatsHourUploadNanoSec() uint64 {
	if m != nil {
		return m.StatsHourUploadNanoSec
	}
	return 0
}

func (m *NodeEntry) GetStatsHourUploadBytes() uint64 {
	if m != nil {
		return m.StatsHourUploadBytes
	}
	return 0
}

func (m *NodeEntry) GetStatsHourLatency() uint64 {
	if m != nil {
		return m.StatsHourLatency
	}
	return 0
}

func (m *NodeEntry) GetStatsDayCount() uint32 {
	if m != nil {
		return m.StatsDayCount
	}
	return 0
}

func (m *NodeEntry) GetStatsDayUploadNanoSec() uint64 {
	if m != nil {
		return m.StatsDayUploadNanoSec
	}
	return 0
}

func (m *NodeEntry) GetStatsDayUploadBytes() uint64 {
	if m != nil {
		return m.StatsDayUploadBytes
	}
	return 0
}

func (m *NodeEntry) GetStatsDayLatency() uint64 {
	if m != nil {
		return m.StatsDayLatency
	}
	return 0
}

func (m *NodeEntry) GetStatsWeekCount() uint32 {
	if m != nil {
		return m.StatsWeekCount
	}
	return 0
}

func (m *NodeEntry) GetStatsWeekUploadNanoSec() uint64 {
	if m != nil {
		return m.StatsWeekUploadNanoSec
	}
	return 0
}

func (m *NodeEntry) GetStatsWeekUploadBytes() uint64 {
	if m != nil {
		return m.StatsWeekUploadBytes
	}
	return 0
}

func (m *NodeEntry) GetStatsWeekLatency() uint64 {
	if m != nil {
		return m.StatsWeekLatency
	}
	return 0
}

type PushNodeListRequest struct {
	MyNodeId uint32       `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	Nodes    []*NodeEntry `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	Padding  []uint32     `protobuf:"varint,3,rep,packed,name=padding" json:"padding,omitempty"`
}

func (m *PushNodeListRequest) Reset()                    { *m = PushNodeListRequest{} }
func (m *PushNodeListRequest) String() string            { return proto.CompactTextString(m) }
func (*PushNodeListRequest) ProtoMessage()               {}
func (*PushNodeListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PushNodeListRequest) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *PushNodeListRequest) GetNodes() []*NodeEntry {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *PushNodeListRequest) GetPadding() []uint32 {
	if m != nil {
		return m.Padding
	}
	return nil
}

type PushNodeListReply struct {
	MyNodeId   uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	ResultCode int32  `protobuf:"varint,2,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
}

func (m *PushNodeListReply) Reset()                    { *m = PushNodeListReply{} }
func (m *PushNodeListReply) String() string            { return proto.CompactTextString(m) }
func (*PushNodeListReply) ProtoMessage()               {}
func (*PushNodeListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PushNodeListReply) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *PushNodeListReply) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

type Destination struct {
	NodeId     uint32   `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NexthopIds []uint32 `protobuf:"varint,2,rep,packed,name=nexthop_ids,json=nexthopIds" json:"nexthop_ids,omitempty"`
}

func (m *Destination) Reset()                    { *m = Destination{} }
func (m *Destination) String() string            { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()               {}
func (*Destination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Destination) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Destination) GetNexthopIds() []uint32 {
	if m != nil {
		return m.NexthopIds
	}
	return nil
}

type NetEntry struct {
	NetId                    uint32 `protobuf:"varint,1,opt,name=net_id,json=netId" json:"net_id,omitempty"`
	StatsHourCount           uint32 `protobuf:"varint,2,opt,name=stats_hour_count,json=statsHourCount" json:"stats_hour_count,omitempty"`
	StatsHourDownloadNanoSec uint64 `protobuf:"varint,3,opt,name=stats_hour_download_nano_sec,json=statsHourDownloadNanoSec" json:"stats_hour_download_nano_sec,omitempty"`
	StatsHourDownloadBytes   uint64 `protobuf:"varint,4,opt,name=stats_hour_download_bytes,json=statsHourDownloadBytes" json:"stats_hour_download_bytes,omitempty"`
	StatsDayCount            uint32 `protobuf:"varint,5,opt,name=stats_day_count,json=statsDayCount" json:"stats_day_count,omitempty"`
	StatsDayDownloadNanoSec  uint64 `protobuf:"varint,6,opt,name=stats_day_download_nano_sec,json=statsDayDownloadNanoSec" json:"stats_day_download_nano_sec,omitempty"`
	StatsDayDownloadBytes    uint64 `protobuf:"varint,7,opt,name=stats_day_download_bytes,json=statsDayDownloadBytes" json:"stats_day_download_bytes,omitempty"`
	StatsWeekCount           uint32 `protobuf:"varint,8,opt,name=stats_week_count,json=statsWeekCount" json:"stats_week_count,omitempty"`
	StatsWeekDownloadNanoSec uint64 `protobuf:"varint,9,opt,name=stats_week_download_nano_sec,json=statsWeekDownloadNanoSec" json:"stats_week_download_nano_sec,omitempty"`
	StatsWeekDownloadBytes   uint64 `protobuf:"varint,10,opt,name=stats_week_download_bytes,json=statsWeekDownloadBytes" json:"stats_week_download_bytes,omitempty"`
}

func (m *NetEntry) Reset()                    { *m = NetEntry{} }
func (m *NetEntry) String() string            { return proto.CompactTextString(m) }
func (*NetEntry) ProtoMessage()               {}
func (*NetEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NetEntry) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *NetEntry) GetStatsHourCount() uint32 {
	if m != nil {
		return m.StatsHourCount
	}
	return 0
}

func (m *NetEntry) GetStatsHourDownloadNanoSec() uint64 {
	if m != nil {
		return m.StatsHourDownloadNanoSec
	}
	return 0
}

func (m *NetEntry) GetStatsHourDownloadBytes() uint64 {
	if m != nil {
		return m.StatsHourDownloadBytes
	}
	return 0
}

func (m *NetEntry) GetStatsDayCount() uint32 {
	if m != nil {
		return m.StatsDayCount
	}
	return 0
}

func (m *NetEntry) GetStatsDayDownloadNanoSec() uint64 {
	if m != nil {
		return m.StatsDayDownloadNanoSec
	}
	return 0
}

func (m *NetEntry) GetStatsDayDownloadBytes() uint64 {
	if m != nil {
		return m.StatsDayDownloadBytes
	}
	return 0
}

func (m *NetEntry) GetStatsWeekCount() uint32 {
	if m != nil {
		return m.StatsWeekCount
	}
	return 0
}

func (m *NetEntry) GetStatsWeekDownloadNanoSec() uint64 {
	if m != nil {
		return m.StatsWeekDownloadNanoSec
	}
	return 0
}

func (m *NetEntry) GetStatsWeekDownloadBytes() uint64 {
	if m != nil {
		return m.StatsWeekDownloadBytes
	}
	return 0
}

type BroadcastNetListRequest struct {
	MyNodeId     uint32         `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	Destinations []*Destination `protobuf:"bytes,2,rep,name=destinations" json:"destinations,omitempty"`
	Nets         []*NetEntry    `protobuf:"bytes,3,rep,name=nets" json:"nets,omitempty"`
}

func (m *BroadcastNetListRequest) Reset()                    { *m = BroadcastNetListRequest{} }
func (m *BroadcastNetListRequest) String() string            { return proto.CompactTextString(m) }
func (*BroadcastNetListRequest) ProtoMessage()               {}
func (*BroadcastNetListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BroadcastNetListRequest) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *BroadcastNetListRequest) GetDestinations() []*Destination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *BroadcastNetListRequest) GetNets() []*NetEntry {
	if m != nil {
		return m.Nets
	}
	return nil
}

type BroadcastNetListReply struct {
	MyNodeId   uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	ResultCode int32  `protobuf:"varint,2,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
}

func (m *BroadcastNetListReply) Reset()                    { *m = BroadcastNetListReply{} }
func (m *BroadcastNetListReply) String() string            { return proto.CompactTextString(m) }
func (*BroadcastNetListReply) ProtoMessage()               {}
func (*BroadcastNetListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BroadcastNetListReply) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *BroadcastNetListReply) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

type QueryReadyRequest struct {
	MyNodeId    uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	NetId       uint32 `protobuf:"varint,2,opt,name=net_id,json=netId" json:"net_id,omitempty"`
	Observation bool   `protobuf:"varint,3,opt,name=observation" json:"observation,omitempty"`
}

func (m *QueryReadyRequest) Reset()                    { *m = QueryReadyRequest{} }
func (m *QueryReadyRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryReadyRequest) ProtoMessage()               {}
func (*QueryReadyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *QueryReadyRequest) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *QueryReadyRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *QueryReadyRequest) GetObservation() bool {
	if m != nil {
		return m.Observation
	}
	return false
}

type QueryReadyReply struct {
	MyNodeId uint32 `protobuf:"varint,1,opt,name=my_node_id,json=myNodeId" json:"my_node_id,omitempty"`
	Ready    bool   `protobuf:"varint,2,opt,name=ready" json:"ready,omitempty"`
}

func (m *QueryReadyReply) Reset()                    { *m = QueryReadyReply{} }
func (m *QueryReadyReply) String() string            { return proto.CompactTextString(m) }
func (*QueryReadyReply) ProtoMessage()               {}
func (*QueryReadyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QueryReadyReply) GetMyNodeId() uint32 {
	if m != nil {
		return m.MyNodeId
	}
	return 0
}

func (m *QueryReadyReply) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type NodeContainer struct {
	NodeId      uint32       `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	RemoteNodes []*NodeEntry `protobuf:"bytes,2,rep,name=remote_nodes,json=remoteNodes" json:"remote_nodes,omitempty"`
	ClientNets  []*NetEntry  `protobuf:"bytes,3,rep,name=client_nets,json=clientNets" json:"client_nets,omitempty"`
}

func (m *NodeContainer) Reset()                    { *m = NodeContainer{} }
func (m *NodeContainer) String() string            { return proto.CompactTextString(m) }
func (*NodeContainer) ProtoMessage()               {}
func (*NodeContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NodeContainer) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeContainer) GetRemoteNodes() []*NodeEntry {
	if m != nil {
		return m.RemoteNodes
	}
	return nil
}

func (m *NodeContainer) GetClientNets() []*NetEntry {
	if m != nil {
		return m.ClientNets
	}
	return nil
}

type GetStatsRequest struct {
}

func (m *GetStatsRequest) Reset()                    { *m = GetStatsRequest{} }
func (m *GetStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStatsRequest) ProtoMessage()               {}
func (*GetStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type GetStatsReply struct {
	Nodes []*NodeContainer `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *GetStatsReply) Reset()                    { *m = GetStatsReply{} }
func (m *GetStatsReply) String() string            { return proto.CompactTextString(m) }
func (*GetStatsReply) ProtoMessage()               {}
func (*GetStatsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetStatsReply) GetNodes() []*NodeContainer {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GetAccessLogRequest struct {
	Date string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
}

func (m *GetAccessLogRequest) Reset()                    { *m = GetAccessLogRequest{} }
func (m *GetAccessLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccessLogRequest) ProtoMessage()               {}
func (*GetAccessLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetAccessLogRequest) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type GetAccessLogReply struct {
	Lines []string `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
}

func (m *GetAccessLogReply) Reset()                    { *m = GetAccessLogReply{} }
func (m *GetAccessLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetAccessLogReply) ProtoMessage()               {}
func (*GetAccessLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetAccessLogReply) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "ftl.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "ftl.HelloReply")
	proto.RegisterType((*PullNodeIdListRequest)(nil), "ftl.PullNodeIdListRequest")
	proto.RegisterType((*PullNodeIdListReply)(nil), "ftl.PullNodeIdListReply")
	proto.RegisterType((*NodeEntry)(nil), "ftl.NodeEntry")
	proto.RegisterType((*PushNodeListRequest)(nil), "ftl.PushNodeListRequest")
	proto.RegisterType((*PushNodeListReply)(nil), "ftl.PushNodeListReply")
	proto.RegisterType((*Destination)(nil), "ftl.Destination")
	proto.RegisterType((*NetEntry)(nil), "ftl.NetEntry")
	proto.RegisterType((*BroadcastNetListRequest)(nil), "ftl.BroadcastNetListRequest")
	proto.RegisterType((*BroadcastNetListReply)(nil), "ftl.BroadcastNetListReply")
	proto.RegisterType((*QueryReadyRequest)(nil), "ftl.QueryReadyRequest")
	proto.RegisterType((*QueryReadyReply)(nil), "ftl.QueryReadyReply")
	proto.RegisterType((*NodeContainer)(nil), "ftl.NodeContainer")
	proto.RegisterType((*GetStatsRequest)(nil), "ftl.GetStatsRequest")
	proto.RegisterType((*GetStatsReply)(nil), "ftl.GetStatsReply")
	proto.RegisterType((*GetAccessLogRequest)(nil), "ftl.GetAccessLogRequest")
	proto.RegisterType((*GetAccessLogReply)(nil), "ftl.GetAccessLogReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FTL service

type FTLClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	PullNodeIdList(ctx context.Context, in *PullNodeIdListRequest, opts ...grpc.CallOption) (*PullNodeIdListReply, error)
	PushNodeList(ctx context.Context, in *PushNodeListRequest, opts ...grpc.CallOption) (*PushNodeListReply, error)
	BroadcastNetList(ctx context.Context, in *BroadcastNetListRequest, opts ...grpc.CallOption) (*BroadcastNetListReply, error)
	QueryReady(ctx context.Context, in *QueryReadyRequest, opts ...grpc.CallOption) (*QueryReadyReply, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsReply, error)
	GetAccessLog(ctx context.Context, in *GetAccessLogRequest, opts ...grpc.CallOption) (*GetAccessLogReply, error)
}

type fTLClient struct {
	cc *grpc.ClientConn
}

func NewFTLClient(cc *grpc.ClientConn) FTLClient {
	return &fTLClient{cc}
}

func (c *fTLClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fTLClient) PullNodeIdList(ctx context.Context, in *PullNodeIdListRequest, opts ...grpc.CallOption) (*PullNodeIdListReply, error) {
	out := new(PullNodeIdListReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/PullNodeIdList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fTLClient) PushNodeList(ctx context.Context, in *PushNodeListRequest, opts ...grpc.CallOption) (*PushNodeListReply, error) {
	out := new(PushNodeListReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/PushNodeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fTLClient) BroadcastNetList(ctx context.Context, in *BroadcastNetListRequest, opts ...grpc.CallOption) (*BroadcastNetListReply, error) {
	out := new(BroadcastNetListReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/BroadcastNetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fTLClient) QueryReady(ctx context.Context, in *QueryReadyRequest, opts ...grpc.CallOption) (*QueryReadyReply, error) {
	out := new(QueryReadyReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/QueryReady", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fTLClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsReply, error) {
	out := new(GetStatsReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fTLClient) GetAccessLog(ctx context.Context, in *GetAccessLogRequest, opts ...grpc.CallOption) (*GetAccessLogReply, error) {
	out := new(GetAccessLogReply)
	err := grpc.Invoke(ctx, "/ftl.FTL/GetAccessLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FTL service

type FTLServer interface {
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
	PullNodeIdList(context.Context, *PullNodeIdListRequest) (*PullNodeIdListReply, error)
	PushNodeList(context.Context, *PushNodeListRequest) (*PushNodeListReply, error)
	BroadcastNetList(context.Context, *BroadcastNetListRequest) (*BroadcastNetListReply, error)
	QueryReady(context.Context, *QueryReadyRequest) (*QueryReadyReply, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsReply, error)
	GetAccessLog(context.Context, *GetAccessLogRequest) (*GetAccessLogReply, error)
}

func RegisterFTLServer(s *grpc.Server, srv FTLServer) {
	s.RegisterService(&_FTL_serviceDesc, srv)
}

func _FTL_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FTL_PullNodeIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullNodeIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).PullNodeIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/PullNodeIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).PullNodeIdList(ctx, req.(*PullNodeIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FTL_PushNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushNodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).PushNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/PushNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).PushNodeList(ctx, req.(*PushNodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FTL_BroadcastNetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastNetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).BroadcastNetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/BroadcastNetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).BroadcastNetList(ctx, req.(*BroadcastNetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FTL_QueryReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).QueryReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/QueryReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).QueryReady(ctx, req.(*QueryReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FTL_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FTL_GetAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTLServer).GetAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftl.FTL/GetAccessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTLServer).GetAccessLog(ctx, req.(*GetAccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FTL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ftl.FTL",
	HandlerType: (*FTLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _FTL_Hello_Handler,
		},
		{
			MethodName: "PullNodeIdList",
			Handler:    _FTL_PullNodeIdList_Handler,
		},
		{
			MethodName: "PushNodeList",
			Handler:    _FTL_PushNodeList_Handler,
		},
		{
			MethodName: "BroadcastNetList",
			Handler:    _FTL_BroadcastNetList_Handler,
		},
		{
			MethodName: "QueryReady",
			Handler:    _FTL_QueryReady_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _FTL_GetStats_Handler,
		},
		{
			MethodName: "GetAccessLog",
			Handler:    _FTL_GetAccessLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x6d, 0x6f, 0xe3, 0x44,
	0x17, 0xdd, 0x34, 0x2f, 0x4d, 0xae, 0x93, 0xa6, 0x99, 0xa6, 0xad, 0xd7, 0x4f, 0x1f, 0x6d, 0xb0,
	0x10, 0xca, 0x22, 0xa8, 0x44, 0x97, 0x5d, 0x58, 0xb4, 0x42, 0xa2, 0xed, 0xd2, 0x22, 0xaa, 0x08,
	0xbc, 0x0b, 0x7c, 0xb4, 0x5c, 0xfb, 0xee, 0xd6, 0xac, 0x33, 0x13, 0xec, 0x09, 0x8b, 0xff, 0x02,
	0x7c, 0xe1, 0x87, 0xf1, 0x97, 0x90, 0x90, 0x67, 0xfc, 0x32, 0x7e, 0x09, 0x2d, 0x82, 0x6f, 0xf1,
	0xbd, 0xe7, 0xdc, 0xb9, 0x67, 0xee, 0x3d, 0x8e, 0x61, 0x10, 0xae, 0xdc, 0xe3, 0x55, 0xc8, 0x38,
	0x23, 0xed, 0x57, 0x3c, 0x30, 0xbf, 0x86, 0xe1, 0x25, 0x06, 0x01, 0xb3, 0xf0, 0xa7, 0x35, 0x46,
	0x9c, 0x1c, 0x01, 0x2c, 0x63, 0x9b, 0x32, 0x0f, 0x6d, 0xdf, 0xd3, 0x5b, 0xb3, 0xd6, 0x7c, 0x64,
	0xf5, 0x97, 0xf1, 0x82, 0x79, 0xf8, 0x95, 0x47, 0xfe, 0x0f, 0x10, 0x30, 0xd7, 0x09, 0x6c, 0xee,
	0x2f, 0x51, 0xdf, 0x9a, 0xb5, 0xe6, 0x6d, 0x6b, 0x20, 0x22, 0x2f, 0xfd, 0x25, 0x9a, 0x36, 0x40,
	0x5a, 0x6c, 0x15, 0xc4, 0xff, 0xaa, 0x14, 0x99, 0x42, 0xd7, 0xf1, 0xbc, 0xf0, 0x89, 0xde, 0x9e,
	0xb5, 0xe6, 0x03, 0x4b, 0x3e, 0x98, 0x8f, 0x61, 0xff, 0x9b, 0x75, 0x10, 0xc8, 0x12, 0x57, 0x7e,
	0xc4, 0xef, 0xd4, 0xb6, 0xb9, 0x80, 0xbd, 0x2a, 0xed, 0xf6, 0x06, 0xef, 0x43, 0x3f, 0x4d, 0x45,
	0xfa, 0xd6, 0xac, 0x3d, 0x1f, 0x59, 0xdb, 0x54, 0x64, 0x22, 0xf3, 0xcf, 0x0e, 0x0c, 0x12, 0xd4,
	0x73, 0xca, 0xc3, 0x98, 0x1c, 0xc2, 0x76, 0xb9, 0x46, 0x4f, 0xe2, 0xc8, 0x1c, 0x76, 0x23, 0xee,
	0xf0, 0xc8, 0xbe, 0x61, 0xeb, 0xd0, 0x76, 0xd9, 0x9a, 0x72, 0x21, 0x74, 0x64, 0xed, 0x88, 0xf8,
	0x25, 0x5b, 0x87, 0x67, 0x49, 0x94, 0x7c, 0x06, 0x86, 0x82, 0x5c, 0xaf, 0x02, 0xe6, 0x78, 0x36,
	0x75, 0x28, 0xb3, 0x23, 0x74, 0xc5, 0x15, 0x74, 0xac, 0x83, 0x9c, 0xf3, 0x9d, 0xc8, 0x2f, 0x1c,
	0xca, 0x5e, 0xa0, 0x4b, 0x1e, 0xc3, 0x61, 0x9d, 0x7b, 0x1d, 0x73, 0x8c, 0xf4, 0x8e, 0x20, 0x4e,
	0x2b, 0xc4, 0xd3, 0x24, 0x47, 0x3e, 0x00, 0xa2, 0xd0, 0x02, 0x87, 0x23, 0x75, 0x63, 0xbd, 0x2b,
	0x18, 0xbb, 0x39, 0xe3, 0x4a, 0xc6, 0xc9, 0x7b, 0x30, 0x96, 0x68, 0xcf, 0x89, 0x53, 0x25, 0x3d,
	0xa1, 0x64, 0x24, 0xc2, 0xe7, 0x4e, 0x2c, 0x85, 0x7c, 0x0a, 0xf7, 0x0b, 0x5c, 0x55, 0xc7, 0xb6,
	0x28, 0xbe, 0x9f, 0x31, 0xca, 0x32, 0x1e, 0xc1, 0x41, 0x8d, 0x29, 0x55, 0xf4, 0x05, 0x6d, 0xaf,
	0x4c, 0x93, 0x22, 0xde, 0x87, 0x49, 0x41, 0xca, 0x34, 0x0c, 0x04, 0x7e, 0x9c, 0xe1, 0x33, 0x09,
	0xf9, 0x34, 0xde, 0x22, 0xbe, 0x49, 0x35, 0x80, 0x32, 0x8d, 0x1f, 0x10, 0xdf, 0x54, 0xa6, 0x21,
	0x90, 0x55, 0x15, 0x9a, 0x32, 0x8d, 0x84, 0xb3, 0x61, 0x1a, 0x2a, 0x57, 0xea, 0x18, 0x2a, 0xd3,
	0x28, 0x88, 0x95, 0x69, 0x08, 0x5a, 0xa6, 0x64, 0xa4, 0x4c, 0x23, 0x61, 0xa4, 0x52, 0xcc, 0x28,
	0xd9, 0xe7, 0xe8, 0x26, 0x59, 0xc1, 0x3b, 0x9b, 0x80, 0xbc, 0x0b, 0xdd, 0x24, 0x25, 0x97, 0x59,
	0x3b, 0xd9, 0x39, 0x7e, 0xc5, 0x83, 0xe3, 0x7c, 0x8b, 0x2d, 0x99, 0x24, 0x3a, 0x6c, 0xaf, 0x1c,
	0xcf, 0xf3, 0xe9, 0x6b, 0xbd, 0x2d, 0x97, 0x3e, 0x7d, 0x34, 0x2d, 0x98, 0x94, 0x0f, 0xbd, 0xdd,
	0x42, 0x0f, 0x40, 0x0b, 0x31, 0x5a, 0x07, 0xdc, 0x76, 0x99, 0x27, 0x4d, 0xde, 0xb5, 0x40, 0x86,
	0xce, 0x98, 0x87, 0xe6, 0x05, 0x68, 0xe7, 0x18, 0x71, 0x9f, 0x3a, 0xdc, 0x67, 0x74, 0xb3, 0x93,
	0x1e, 0x80, 0x46, 0xf1, 0x17, 0x7e, 0xc3, 0x56, 0x8a, 0x1d, 0x21, 0x0d, 0x25, 0x8e, 0xfc, 0xb5,
	0x03, 0xfd, 0x05, 0x72, 0x69, 0xc8, 0x7d, 0xe8, 0x51, 0xe4, 0x45, 0x95, 0x2e, 0x45, 0xfe, 0x8f,
	0xec, 0xf8, 0x39, 0x1c, 0x29, 0x48, 0x8f, 0xbd, 0xa5, 0x4d, 0x86, 0xd4, 0x73, 0xd6, 0x79, 0x8a,
	0xc8, 0x96, 0xe0, 0x69, 0xe6, 0x82, 0x32, 0x5f, 0x35, 0xe5, 0x41, 0x8d, 0x2c, 0x17, 0xa1, 0xc1,
	0x68, 0xdd, 0x26, 0xa3, 0x3d, 0x83, 0xff, 0x15, 0xb8, 0x7a, 0x87, 0x3d, 0x71, 0xc8, 0x61, 0xc6,
	0xa9, 0x36, 0xf8, 0x09, 0xe8, 0x0d, 0x6c, 0xd9, 0x5f, 0xc5, 0xa5, 0xe5, 0xf6, 0x9a, 0x4c, 0xd4,
	0x6f, 0x34, 0x51, 0x7e, 0x87, 0x02, 0x59, 0xef, 0x70, 0xa0, 0xdc, 0x61, 0xc2, 0xda, 0x78, 0x87,
	0x65, 0xbe, 0xec, 0x11, 0x2a, 0x1e, 0x2c, 0x35, 0x69, 0xfe, 0xde, 0x82, 0xc3, 0xd3, 0x90, 0x39,
	0x9e, 0xeb, 0x44, 0x7c, 0x81, 0xfc, 0xee, 0x1e, 0xf9, 0x18, 0x86, 0x5e, 0xb1, 0x8f, 0x99, 0x55,
	0x76, 0x85, 0x55, 0x94, 0x45, 0xb5, 0x4a, 0x28, 0xf2, 0x0e, 0x74, 0x28, 0xf2, 0x48, 0x18, 0x46,
	0x3b, 0x19, 0x49, 0x63, 0xa5, 0xcb, 0x68, 0x89, 0x94, 0xf9, 0x3d, 0xec, 0xd7, 0x3b, 0xfa, 0x0f,
	0x0c, 0xf4, 0x23, 0x4c, 0xbe, 0x5d, 0x63, 0x18, 0x5b, 0xe8, 0x78, 0xf1, 0xdd, 0x34, 0x16, 0xee,
	0xd8, 0x52, 0xdd, 0x31, 0x03, 0x8d, 0x5d, 0x47, 0x18, 0xfe, 0x2c, 0x44, 0x89, 0x15, 0xef, 0x5b,
	0x6a, 0xc8, 0x7c, 0x0e, 0x63, 0xf5, 0xac, 0xdb, 0xbb, 0x9f, 0x42, 0x37, 0x4c, 0xb0, 0xe2, 0xa0,
	0xbe, 0x25, 0x1f, 0xcc, 0xdf, 0x5a, 0x30, 0x4a, 0x00, 0x67, 0x8c, 0x72, 0xc7, 0xa7, 0x18, 0x6e,
	0xb6, 0xfd, 0x47, 0x30, 0x0c, 0x71, 0xc9, 0x38, 0xda, 0x7f, 0xf7, 0xe6, 0xd2, 0x24, 0x66, 0x21,
	0xde, 0x5f, 0xc7, 0xa0, 0xb9, 0x81, 0x8f, 0x94, 0xdb, 0x9b, 0x47, 0x02, 0x12, 0xb1, 0x48, 0x06,
	0x33, 0x81, 0xf1, 0x05, 0xf2, 0x17, 0xc9, 0x22, 0xa5, 0xd7, 0x67, 0x3e, 0x85, 0x51, 0x11, 0x4a,
	0x54, 0xce, 0xb3, 0x37, 0x67, 0x4b, 0x54, 0x23, 0xf9, 0xf9, 0xb9, 0x84, 0xf4, 0xed, 0x69, 0x3e,
	0x84, 0xbd, 0x0b, 0xe4, 0x5f, 0xb8, 0x2e, 0x46, 0xd1, 0x15, 0x7b, 0x9d, 0x0d, 0x84, 0x40, 0xc7,
	0x73, 0x38, 0x0a, 0x75, 0x03, 0x4b, 0xfc, 0x36, 0x1f, 0xc2, 0xa4, 0x0c, 0x4d, 0x4e, 0x9a, 0x42,
	0x37, 0xf0, 0x69, 0x7a, 0xd2, 0xc0, 0x92, 0x0f, 0x27, 0x7f, 0xb4, 0xa1, 0xfd, 0xe5, 0xcb, 0x2b,
	0xf2, 0x21, 0x74, 0xc5, 0xe7, 0x15, 0x99, 0x88, 0x0e, 0xd4, 0xef, 0x36, 0x63, 0xac, 0x86, 0x56,
	0x41, 0x6c, 0xde, 0x23, 0x97, 0xb0, 0x53, 0xfe, 0xea, 0x21, 0x86, 0x00, 0x35, 0x7e, 0x41, 0x19,
	0x7a, 0x63, 0x4e, 0x56, 0x3a, 0x85, 0xa1, 0xfa, 0xea, 0x27, 0x19, 0xb6, 0xf6, 0x17, 0x64, 0x1c,
	0x34, 0x64, 0x64, 0x8d, 0x05, 0xec, 0x56, 0x1d, 0x40, 0x8e, 0x04, 0x7a, 0x83, 0x55, 0x0d, 0x63,
	0x43, 0x56, 0xd6, 0x7b, 0x06, 0x50, 0x6c, 0x23, 0x91, 0xe7, 0xd6, 0xac, 0x60, 0x4c, 0x6b, 0x71,
	0xc9, 0x7e, 0x02, 0xfd, 0x6c, 0xc6, 0x44, 0x62, 0x2a, 0x5b, 0x60, 0x90, 0x4a, 0x34, 0xbf, 0x09,
	0x75, 0x6a, 0xe9, 0x4d, 0x34, 0xcc, 0x3c, 0xbd, 0x89, 0xda, 0x88, 0xcd, 0x7b, 0xd7, 0x3d, 0xf1,
	0xf9, 0xfd, 0xe8, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xdd, 0x2f, 0x3f, 0x8b, 0x0b, 0x00,
	0x00,
}
